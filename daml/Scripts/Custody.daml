module Scripts.Custody where

import DA.Map (empty, fromList)
import DA.Set (singleton)
import Daml.Script
import DA.Assert

-- INTERFACE DEPENDENCIES --
import Daml.Finance.Interface.Account.Factory qualified as Account (F)
import Daml.Finance.Interface.Holding.Base qualified as Holding (GetView(..), View(..))
import Daml.Finance.Interface.Holding.Factory qualified as Holding (F)
import Daml.Finance.Interface.Types.Common.Types
  ( AccountKey, InstrumentKey(..), PartiesMap(..), Quantity(..) )

-- IMPLEMENTATION DEPENDENCIES --
import Daml.Finance.Account.Account qualified as Account (Factory(..))
import Daml.Finance.Holding.Fungible qualified as Fungible (Factory(..))

import Scripts.Util.Common
import Scripts.Util.Instrument
import Scripts.Util.Role
import Scripts.Util.Service
import Scripts.Util.Workflow
import Workflow.Custody.Service qualified as Custody

aliceCanDeposit : Script ()
aliceCanDeposit = setup >>= \Setup{..} -> do
  let quantity = Quantity usdKey 100.0
  aliceHoldingCid <- deposit operator custodian alice public quantity aliceAccountKey

  -- Assertions
  aliceHoldingView <- submit alice do exerciseCmd aliceHoldingCid Holding.GetView with viewer = alice
  aliceHoldingView === Holding.View usdKey aliceAccountKey 100.0 None

aliceCannotDepositAfterOperatorTerminatesServicesForCustodian : Script ()
aliceCannotDepositAfterOperatorTerminatesServicesForCustodian = setup >>= \Setup{..} -> do
  terminateCustodianRole operator custodian
  terminateCustodyServices operator custodian

  let quantity = Quantity usdKey 100.0
  submitMustFail alice do
    exerciseByKeyCmd @Custody.Service (custodian, alice) Custody.RequestDeposit with
      quantity
      account = aliceAccountKey

data Setup = Setup
  with
    operator : Party
    custodian : Party
    alice : Party
    public : Party
    pub : PartiesMap
    accountFactoryCid : ContractId Account.F
    holdingFactoryCid : ContractId Holding.F
    usdKey : InstrumentKey
    aliceAccountKey : AccountKey

setup : Script Setup
setup = do
  StdParties{..} <- allocateParties
  let pub = fromList [("Public", singleton public)]

  accountFactoryCid <- toInterfaceContractId <$> submit operator do
    createCmd Account.Factory  with provider = operator; observers = pub
  holdingFactoryCid <- toInterfaceContractId <$> submit operator do
    createCmd Fungible.Factory with provider = operator; observers = pub

  now <- getTime
  usdKey <- originateToken custodian custodian pub now "USD" "USD token"

  createOperatorRole operator public
  createCustodianRoleWithOffer operator custodian public
  createCustodyServiceWithRequest operator custodian alice accountFactoryCid holdingFactoryCid
  aliceAccountKey <- createAccount operator custodian alice public "alice@custodian" empty

  pure Setup with ..